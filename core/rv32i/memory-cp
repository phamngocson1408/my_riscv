`timescale 1ns / 10ps
module memory 
(
	// Input
	 input 		rst_i
	,input 		clk_i
	,input 		mem_wr_en_i
	,input [31:0] 	mem_addr_i
	,input [31:0] 	mem_data_i
	,input [31:0] 	mem_pc_i
	,input 		mem_ld_en_i
	,input [31:0] 	mem_ld_addr_i

	// Output
	,output [31:0] 	mem_data_o
	,output [31:0] 	mem_ld_data_o
);

// Total memory size
parameter MEMSIZE = 131072;
reg [31:0] MEM[0:MEMSIZE];

integer i;

initial begin
	$readmemh("./test_vector/rv32ui-p-and.hex", MEM);
	for ( i = 0 ; i < 20 ; i = i+1 )
		$display("MEM[%d]=%h\n",i, MEM[i]);
	//Initiate MEM from a source code
end

always @(posedge clk_i) begin
	if (mem_wr_en_i)
		MEM[mem_addr_i] <= #1 mem_data_i[31:0];
end

//wire [31:0] mem_data_o = (mem_pc_i == 32'h00) ? {8'h04, 8'hc0, 8'h00, 8'h6f} : (!rst_i) ? {MEM[mem_pc_3][7:0], MEM[mem_pc_2], MEM[mem_pc_1], MEM[mem_pc_i]} : 32'h00;
wire [31:0] mem_data_o = (!rst_i) ? MEM[mem_pc_i] : 32'h00;
wire [31:0] mem_ld_data_o = (!rst_i && mem_ld_en_i) ? MEM[mem_ld_addr_i] : 32'h00;

endmodule
